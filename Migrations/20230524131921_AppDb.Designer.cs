// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Study_Abroad.Data;

namespace Study_Abroad.Migrations
{
    [DbContext(typeof(StudyAbroadContext))]
    [Migration("20230524131921_AppDb")]
    partial class AppDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Study_Abroad.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agent_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agent_Passward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AgentId");

                    b.HasIndex("CityId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Study_Abroad.Models.ApplicationDetails", b =>
                {
                    b.Property<int>("AppDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseIntakeId")
                        .HasColumnType("bigint");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentProfileStudentId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("AppDetailId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseIntakeId");

                    b.HasIndex("StudentProfileStudentId");

                    b.HasIndex("UniversityId");

                    b.ToTable("ApplicationDetails");
                });

            modelBuilder.Entity("Study_Abroad.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("CampusId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Study_Abroad.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Study_Abroad.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactUsEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactUsMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactUsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactUsSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ContactUsId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Study_Abroad.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Study_Abroad.Models.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CourseApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseHowToApply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseIntake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseLearningOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseOverview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseReviewAndRanking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseScholarship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseStartDateAndPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTutionFee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisiplineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramLevelsProgram_Id")
                        .HasColumnType("int");

                    b.Property<int>("Program_Id")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CourseId");

                    b.HasIndex("CampusId");

                    b.HasIndex("DisiplineId");

                    b.HasIndex("ProgramLevelsProgram_Id");

                    b.HasIndex("StateId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Study_Abroad.Models.CourseIntake", b =>
                {
                    b.Property<long>("CourseIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseIntakeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CourseIntakeId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseIntakes");
                });

            modelBuilder.Entity("Study_Abroad.Models.Disipline", b =>
                {
                    b.Property<int>("DisiplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisiplineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DisiplineId");

                    b.ToTable("Disiplines");
                });

            modelBuilder.Entity("Study_Abroad.Models.EducationDetail", b =>
                {
                    b.Property<int>("Edu_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("Country_Of_Institute")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Degree_End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Degree_Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("EDU_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDU_Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education_Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Graduate_From")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Graduation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Physical_Certificate")
                        .HasColumnType("bit");

                    b.Property<int>("Postal_Code")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("studentProfileStudentId")
                        .HasColumnType("int");

                    b.HasKey("Edu_Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("studentProfileStudentId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Study_Abroad.Models.GmatTest", b =>
                {
                    b.Property<int>("GmatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GMAT_Exam_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GMAT_Exame")
                        .HasColumnType("bit");

                    b.Property<double>("GMAT_Quantitative")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Quantitative_Rank")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Total")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Total_Rank")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Verbal")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Verbal_Rank")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Writting")
                        .HasColumnType("float");

                    b.Property<double>("GMAT_Writting_Rank")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("GmatId");

                    b.HasIndex("StudentId");

                    b.ToTable("GmatTests");
                });

            modelBuilder.Entity("Study_Abroad.Models.GreTest", b =>
                {
                    b.Property<int>("GreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GRE_Exam_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GRE_Exame")
                        .HasColumnType("bit");

                    b.Property<double>("GRE_Quantitative")
                        .HasColumnType("float");

                    b.Property<double>("GRE_Quantitative_Rank")
                        .HasColumnType("float");

                    b.Property<double>("GRE_Verbal")
                        .HasColumnType("float");

                    b.Property<double>("GRE_Verbal_Rank")
                        .HasColumnType("float");

                    b.Property<double>("GRE_Writting")
                        .HasColumnType("float");

                    b.Property<double>("GRE_Writting_Rank")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("GreId");

                    b.HasIndex("StudentId");

                    b.ToTable("GreTest");
                });

            modelBuilder.Entity("Study_Abroad.Models.LanguageTest", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exam_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Listening_Score")
                        .HasColumnType("float");

                    b.Property<double>("Overall_Score")
                        .HasColumnType("float");

                    b.Property<double>("Reading_Score")
                        .HasColumnType("float");

                    b.Property<double>("Speaking_Score")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<double>("Writing_Score")
                        .HasColumnType("float");

                    b.HasKey("LanguageId");

                    b.HasIndex("StudentId");

                    b.ToTable("LanguageTests");
                });

            modelBuilder.Entity("Study_Abroad.Models.ProgramLevel", b =>
                {
                    b.Property<int>("Program_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Program_Id");

                    b.ToTable("ProgramLevels");
                });

            modelBuilder.Entity("Study_Abroad.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Study_Abroad.Models.StudentProfile", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Country_Of_Intrest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Country_of_Education")
                        .HasColumnType("int");

                    b.Property<int?>("Current_Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education_Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("F_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<float?>("Grade_Scale")
                        .HasColumnType("real");

                    b.Property<string>("Grading_Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grading_Score")
                        .HasColumnType("real");

                    b.Property<bool>("Graduated_From")
                        .HasColumnType("bit");

                    b.Property<string>("IsStudy_Permit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid_Visa")
                        .HasColumnType("bit");

                    b.Property<string>("L_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("M_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Marital_Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Passport_Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passport_Num")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport_Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Postal_Code")
                        .HasColumnType("int");

                    b.Property<string>("Referral_Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_Of_Intrest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("StudentProfiles");
                });

            modelBuilder.Entity("Study_Abroad.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolType")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UniversityIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.Agent", b =>
                {
                    b.HasOne("Study_Abroad.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("Study_Abroad.Models.ApplicationDetails", b =>
                {
                    b.HasOne("Study_Abroad.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Study_Abroad.Models.CourseIntake", "CourseIntake")
                        .WithMany()
                        .HasForeignKey("CourseIntakeId");

                    b.HasOne("Study_Abroad.Models.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentProfileStudentId");

                    b.HasOne("Study_Abroad.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.Campus", b =>
                {
                    b.HasOne("Study_Abroad.Models.University", "Universities")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.City", b =>
                {
                    b.HasOne("Study_Abroad.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Study_Abroad.Models.State", "States")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.Course", b =>
                {
                    b.HasOne("Study_Abroad.Models.Campus", "Campuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Study_Abroad.Models.Disipline", "Disiplines")
                        .WithMany()
                        .HasForeignKey("DisiplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Study_Abroad.Models.ProgramLevel", "ProgramLevels")
                        .WithMany()
                        .HasForeignKey("ProgramLevelsProgram_Id");

                    b.HasOne("Study_Abroad.Models.State", "States")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.CourseIntake", b =>
                {
                    b.HasOne("Study_Abroad.Models.Course", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.EducationDetail", b =>
                {
                    b.HasOne("Study_Abroad.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Study_Abroad.Models.StudentProfile", "studentProfile")
                        .WithMany()
                        .HasForeignKey("studentProfileStudentId");
                });

            modelBuilder.Entity("Study_Abroad.Models.GmatTest", b =>
                {
                    b.HasOne("Study_Abroad.Models.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.GreTest", b =>
                {
                    b.HasOne("Study_Abroad.Models.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.LanguageTest", b =>
                {
                    b.HasOne("Study_Abroad.Models.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.State", b =>
                {
                    b.HasOne("Study_Abroad.Models.Country", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Study_Abroad.Models.StudentProfile", b =>
                {
                    b.HasOne("Study_Abroad.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Study_Abroad.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Study_Abroad.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Study_Abroad.Models.University", b =>
                {
                    b.HasOne("Study_Abroad.Models.Country", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Study_Abroad.Models.State", "States")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
